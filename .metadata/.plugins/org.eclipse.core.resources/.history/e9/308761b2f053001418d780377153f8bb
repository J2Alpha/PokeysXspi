/*
 * pokeyconfigures.cpp
 *
 *  Created on: 14 okt. 2014
 *      Author: J2Alpha
 */

#include "pokeyconfigures.h"

int pokeys_search_connect(int pokeysnum = 0 ,int method = 0,int specific = 0 ){

	switch (method)
	{
	case 0:
		pokeys_search_net_connect(pokeysnum,specific);
		break;
	case 1:
		pokeys_search_usb_connect(pokeysnum, specific);
		break;
	case 2:
		pokeys_search_any_connect(pokeysnum,specific);
		break;
	default:
		pokeys_search_any_connect(pokeysnum,specific);
		break;
	}
	// This is how the connection with network PoKeys devices is established
	return 0;
}

int pokeys_search_any_connect(int pokeysnum, int specific)
{
	if(pokeys_search_net_connect(pokeysnum,specific)){
		if(pokeys_search_usb_connect(pokeysnum, specific)){
			return 1;
		}
	}
	return 0;
}

int pokeys_search_usb_connect(int pokeysnum, int specific)
{
	if((usbDevNum = PK_EnumerateUSBDevices()))
	{
		// Connect to first USB device
		dev = PK_ConnectToDevice(0);
		if (dev != NULL)
		{
			devSerial = dev->DeviceData.SerialNumber;
			printf("Connection established to USB PoKeys device with serial number %d\n", devSerial);

		}
		else
		{
			printf("Connecting to USB PoKeys device failed!\n");

		}
		return 0;
	}
	return 1;
}
int pokeys_search_net_connect(int pokeysnum, int specific)
{
	sPoKeysNetworkDeviceSummary netDevices[16];
	printf("Enumerating network devices...\t\t ");
	if((netDevNum = PK_EnumerateNetworkDevices(netDevices, 1000)))
	{
		// Connect to first network device...
		dev = PK_ConnectToNetworkDevice(&netDevices[0]);
		if (dev != NULL)
		{
			devSerial = dev->DeviceData.SerialNumber;
			printf("Connection established to network PoKeys device with serial number %d\n", devSerial);
			// Do something here...
		}
		else
		{
			printf("Connecting to network PoKeys device failed!\n");
		}
		return 0;
	}
	return 1;
}
//set IO config of connected pokey
int pokeys_setIO(vector<vector<int> > *box){
	for (vector<vector<int> >::iterator here = box->begin(); here != box->end(); ++here){
		dev->Pins[(*here[0])].PinFunction = *here[1];
	}

	return 0;
}
//get pinstate in aperpin fashin
/**
 * todo implement setting whole pokey at once
 **/
int pokeys_pinstate(int pin){
	return 0;
}
//perform an spi read
int pokeys_spi_read(int * destination){
	return 0;
}
//close connections
int pokey_close(void){
	PK_DisconnectDevice(dev);
	return 0;
}


